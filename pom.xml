<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>launch</groupId>
	<artifactId>cc</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>cc</name>
	<description>CC</description>

	<repositories>
		<repository>
			<url>http://central.maven.org/maven2/</url>
			<id>central</id>
		</repository>
		<repository>
			<id>maven-eclipse-repo</id>
			<url>http://maven-eclipse.github.io/maven</url>
		</repository>

	</repositories>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<installer.dir>${project.basedir}/target/installer</installer.dir>
		<swt.version>4.6</swt.version>
		<mainClass>launcher.Launcher</mainClass>
	</properties>
	<dependencies>

	</dependencies>


	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<archive>
								<manifest>
									<mainClass>${mainClass}</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<finalName>${project.build.finalName}-jar-with-dependencies</finalName>
							<appendAssemblyId>false</appendAssemblyId>
						</configuration>
					</execution>
				</executions>
			</plugin>
        <plugin>
            <groupId>com.github.wvengen</groupId>
            <artifactId>proguard-maven-plugin</artifactId>
            <version>2.0.8</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals><goal>proguard</goal></goals>
                    <configuration>
                        <injar>${project.build.finalName}-jar-with-dependencies.jar</injar> <!-- make sure to obfuscate the jar with dependencies -->
                        <proguardVersion>5.3.3</proguardVersion>
                        <options>
							<option>-assumenosideeffects class java.io.PrintStream {
								public void println(%);
								public void println(**);
								}</option>
                            <option>-allowaccessmodification</option>
                            <option>-dontoptimize</option>
                            <option>-dontshrink</option>
                            <option>-dontnote</option>
                            <option>-dontwarn</option> <!-- added option to ignore com.sun missing classes -->
                            <option>-keepattributes Signature</option>
                            <option>-keep public class ${mainClass} { 
      public static void main(java.lang.String[]); 
}</option>
                            <option>-keep class org.jnativehook.DefaultLibraryLocator</option>
                            <option>-keep class org.jnativehook.GlobalScreen</option>
							<option>-keep class org.jnativehook.** { *; }</option>
							<option>-keepattributes *Annotation*</option>
							<option>-keep class com.google.gson.stream.JsonWriter</option>
							<option>-keep class javazoom.jl.**{ *;}</option>
							<option>-keepclassmembers class cc.translate.api.model.TranslateResult{ private &lt;fields&gt;; }</option>

							
							
<option>-keepclassmembers class * extends java.lang.Enum {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}
</option>
                        </options>
                        
                        <libs>
                            <lib>${java.home}/lib/rt.jar</lib>
                        </libs>
                    </configuration>
                </execution>
            </executions>
        </plugin>
			<!-- http://launch4j.sourceforge.net/docs.html#Configuration_file -->
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>l4j-clui</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<dontWrapJar>false</dontWrapJar>
							<headerType>gui</headerType>
							<outfile>target/cc.exe</outfile>
							<jar>target/${project.build.finalName}-jar-with-dependencies.jar</jar>
							<stayAlive>true</stayAlive>
							<errTitle>cc</errTitle>
							<icon>cc.ico</icon>
							<singleInstance>
								<mutexName>cc</mutexName>
								<windowTitle>cc</windowTitle>
							</singleInstance>
							<classPath>
								<mainClass>${mainClass}</mainClass>
								<addDependencies>true</addDependencies>
								<preCp>anything</preCp>
							</classPath>
							<jre>
								<path>jre</path>
								<minVersion>1.6.0</minVersion>
								<opts>
									<opt>-Djava.endorsed.dirs=./endorsed</opt>
									<opt>-Dfile.encoding=GB18030</opt>
								</opts>
							</jre>

							<versionInfo>
								<fileVersion>0.1.0.0</fileVersion>
								<txtFileVersion>cc</txtFileVersion>
								<fileDescription>cc</fileDescription>
								<copyright>Cc</copyright>
								<productVersion>0.1.0.0</productVersion>
								<txtProductVersion>0.1</txtProductVersion>
								<productName>cc</productName>
								<internalName>cc</internalName>
								<originalFilename>original.exe</originalFilename>
							</versionInfo>
						</configuration>
					</execution>
				</executions>
			</plugin>
<!-- 
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>ant-min-jre</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<property name="compile_classpath" refid="maven.compile.classpath" />
								<property name="outputDir" value="${project.build.outputDirectory}" />
								<property name="sourceDir" value="${project.build.sourceDirectory}" />
								<property name="compile_classpath" refid="maven.compile.classpath" />
								<property name="runtime_classpath" refid="maven.runtime.classpath" />
								<property name="test_classpath" refid="maven.test.classpath" />
								<property name="plugin_classpath" refid="maven.plugin.classpath" />
								<property name="installer.dir" value="${installer.dir}" />
								<property name="project.basedir" value="${project.basedir}" />

								<ant antfile="${basedir}/build.xml" target="mini-jre" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>default-cli</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy todir="${installer.dir}/commons-daemon">
									<fileset dir="${project.basedir}/external/commons-daemon" />
								</copy>
								<copy file="${project.build.directory}/cc.jar" todir="${installer.dir}" />
								<copy file="${project.build.directory}/cc.exe" todir="${installer.dir}" />

								<copy file="${project.basedir}/test.bat" todir="${installer.dir}" />
								<copy file="${project.basedir}/install.bat" todir="${installer.dir}" />
								<copy file="${project.basedir}/uninstall.bat" todir="${installer.dir}" />
								<copy file="${project.basedir}/LICENSE" todir="${installer.dir}" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- 下面这个plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix><!--指定classpath的前缀 -->
							<mainClass>${mainClass}</mainClass><!--指定主类的类名 -->
						</manifest>
					</archive>
				</configuration>
			</plugin>


			<!-- -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>



							<!--指定outputDirectory -->
							<outputDirectory>${project.build.directory}/lib</outputDirectory>


							<!-- <outputDirectory>${project.build.directory}/classes/lib</outputDirectory> 
								Alternatively use ${project.build.directory}/classes/lib as OutputDirectory 
								to integrate all jar-files into the main jar, but then you will need to add 
								custom classloading code to load the jars. -->



							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>


			</plugins>
		</pluginManagement>
	</build>

</project>
